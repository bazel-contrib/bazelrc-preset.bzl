"""Rule/Macro pair to produce bazelrc preset file"""

load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_file")
load("@bazel_features_version//:version.bzl", "version")
load("@bazel_skylib//lib:new_sets.bzl", "sets")
load("//:flags.bzl", "FLAGS")
load("//private:util.bzl", "lt")

def _strip(s):
    return s.strip()

def _format_flag(flag, meta):
    command = getattr(meta, "command", "common")
    commands = _expand_commands(command)

    return "\n".join(["{} {}".format(
        command,
        _format_boolean_flag(flag, meta) if type(meta.default) == "bool" else _format_flag_with_value(flag, meta),
    ) for command in commands])

def _expand_commands(command):
    if lt("6.3.0"):
        if command == "common":
            return ["build", "fetch", "query"]
        if command.startswith("common:"):
            config = command.split(":")[1]
            return ["build:{}".format(config), "fetch:{}".format(config), "query:{}".format(config)]
    return [command]

def _format_flag_with_value(flag, meta):
    return "--{}={}".format(
        flag,
        "\"{}\"".format(meta.default) if type(meta.default) == "string" else meta.default,
    )

def _format_boolean_flag(flag, meta):
    return "--{}".format(flag) if meta.default else "--no{}".format(flag)

def _generate_preset_flag(content, flag, meta):
    if not getattr(meta, "if_bazel_version", True):
        return content  # Flag does not apply to the version of Bazel currently running
    content.add_all(meta.description.strip().split("\n"), format_each = "# %s", map_each = _strip)
    content.add(_format_flag(flag, meta))
    return content

def _verify_command_overrides(meta):
    unique_commands = sets.make([getattr(meta_item, "command", "common") for meta_item in meta])
    if sets.length(unique_commands) != len(meta):
        fail("Multiple flag overrides use the same command. Make sure flag overrides use different command.")

def _generate_preset(ctx):
    content = ctx.actions.args().set_param_file_format("multiline")
    content.add_all([
        "Generated by bazelrc-preset.bzl",
        "To update this file, run:",
        "  bazel run {}.update".format(ctx.label),
    ], format_each = "# %s")
    content.add("")

    for flag, meta in FLAGS.items():
        content.add("# {}".format(flag))
        content.add("# Docs: https://registry.build/flag/bazel@{}?filter={}".format(version, flag))
        if type(meta) != type([]):
            meta = [meta]
        _verify_command_overrides(meta)
        for meta_item in meta:
            content = _generate_preset_flag(content, flag, meta_item)
        content.add("")
    ctx.actions.write(ctx.outputs.out, content)

generate_preset = rule(
    implementation = _generate_preset,
    attrs = {"out": attr.output()},
)

def bazelrc_preset(name, out_file = None):
    generate_preset(
        name = name,
        out = "_{}.bazelrc".format(name),
    )
    if not out_file:
        out_file = "{}.bazelrc".format(name)
    write_source_file(
        name = "{}.update".format(name),
        out_file = out_file,
        in_file = name,
        diff_test_failure_message = "The bazelrc preset has changed. Run 'bazel run {{TARGET}}' to update it.",
        file_missing_failure_message = "File %s is missing. Run 'bazel run {{TARGET}}' to create it." % out_file,
    )
