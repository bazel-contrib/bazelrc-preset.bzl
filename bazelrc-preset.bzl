"""Rule/Macro pair to produce bazelrc preset file"""
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_file")
load("//:flags.bzl", "FLAGS")

def _strip(s):
    return s.strip()

def _generate_preset(ctx):
    content = ctx.actions.args().set_param_file_format("multiline")
    content.add_all([
        "Generated by bazelrc-preset.bzl",
        "To update this file, run:",
        "  bazel run {}.update".format(ctx.label),
    ], format_each = "# %s")
    content.add("")

    for flag, meta in FLAGS.items():
        if not getattr(meta, "if_bazel_version", True):
            continue # Flag does not apply to the version of Bazel currently running
        content.add_all(meta.description.split("\n"), format_each = "# %s", map_each = _strip)
        content.add("{} --{}={}".format(
            getattr(meta, "command", "common"),
            flag,
            meta.default if type(meta.default) == "int" else "\"{}\"".format(meta.default),
        ))
    ctx.actions.write(ctx.outputs.out, content)

generate_preset = rule(
    implementation = _generate_preset,
    attrs = {"out": attr.output()},
)

def bazelrc_preset(name, out_file = None):
    generate_preset(
        name = name,
        out = "_{}.bazelrc".format(name),
    )
    if not out_file:
        out_file = "{}.bazelrc".format(name)
    write_source_file(
        name = "{}.update".format(name),
        out_file = out_file,
        in_file = name,
        diff_test_failure_message = "The bazelrc preset has changed. Run 'bazel run {{TARGET}}' to update it.",
        file_missing_failure_message = "File %s is missing. Run 'bazel run {{TARGET}}' to create it." % out_file,
    )
