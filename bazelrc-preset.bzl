"Rule/Macro pair to produce bazelrc preset file"
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_file")
load("//:flags.bzl", "FLAGS")

def _generate_preset(ctx):
    content = ctx.actions.args().set_param_file_format("multiline")
    content.add("# Generated by bazelrc-preset.bzl")
    for flag, meta in FLAGS.items():
        if not meta.when:
            continue
        command = getattr(meta, "command", "common")
        for line in meta.description.split("\n"):
            if line:
                content.add("# " + line.strip())
        content.add("{} --{}={}".format(command, flag, meta.default))
    ctx.actions.write(ctx.outputs.out, content)

generate_preset = rule(
    implementation = _generate_preset,
    attrs = {
        "out": attr.output(),
    },
)

# NB: rename the repo to bazelrc-preset.bzl to allow short load?
def bazelrc_preset(name, out_file = None):
    generate_preset(
        name = name,
        out = "_{}.bazelrc".format(name),
    )
    if not out_file:
        out_file = "{}.bazelrc".format(name)
    write_source_file(
        name = "{}.update".format(name),
        out_file = out_file,
        in_file = name,
        diff_test_failure_message = "The bazelrc preset has changed. Run 'bazel run {{TARGET}}' to update it.",
        file_missing_failure_message = "File %s is missing. Run 'bazel run {{TARGET}}' to create it." % out_file,
    )
